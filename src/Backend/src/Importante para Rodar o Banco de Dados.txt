Colocar no .env:
MYSQL_HOST=127.0.0.1 ou localhost
MYSQL_PORT=3306
MYSQL_USER=root
MYSQL_PASSWORD=
MYSQL_DATABASE=projetoPI


PORT=3000
CORS_ORIGIN=http://localhost:5173

# JWT (obrigatório para não dar 500)
JWT_SECRET=uma_chave_super_segura_aqui
JWT_REFRESH_SECRET=uma_chave_refresh_diferente
JWT_EXPIRES_IN=15m
JWT_REFRESH_EXPIRES_IN=7d
NODE_ENV=development


# Cookies (se usar refresh em cookie httpOnly)
COOKIE_SECURE=fals

Banco de Dados:
/* ======================================================================
   BANCO: projetoPI  
   ====================================================================== */

-- Segurança: evite bloqueios durante recriação
SET FOREIGN_KEY_CHECKS = 0;

-- 1) Database
CREATE DATABASE IF NOT EXISTS `projetoPI`
  DEFAULT CHARACTER SET utf8mb4
  DEFAULT COLLATE utf8mb4_unicode_ci;

USE `projetoPI`;

-- 2) DROP TABLES (ordem reversa de dependências)
DROP TABLE IF EXISTS arquivo;
DROP TABLE IF EXISTS doacao_item;
DROP TABLE IF EXISTS doacao_dinheiro;
DROP TABLE IF EXISTS doacao;
DROP TABLE IF EXISTS postagem;
DROP TABLE IF EXISTS relatorio;
DROP TABLE IF EXISTS metas;
DROP TABLE IF EXISTS user_presence;
DROP TABLE IF EXISTS usuario;
DROP TABLE IF EXISTS grupo_membro;
DROP TABLE IF EXISTS grupo;

SET FOREIGN_KEY_CHECKS = 1;

/* ======================================================================
   TABELAS
   ====================================================================== */

-- ============================================================
-- GRUPO  (compatível com metasController: coluna nome_grupo)
-- mentor: textual; mentor_id reservado p/ ligação com usuario (opcional)
-- ============================================================
CREATE TABLE IF NOT EXISTS grupo (
  ID_grupo           INT AUTO_INCREMENT PRIMARY KEY,
  nome_grupo         VARCHAR(120) NOT NULL,
  meta_arrecadacao   DECIMAL(12,2) DEFAULT 0,
  meta_alimentos     VARCHAR(120),
  capa_url           VARCHAR(255),
  mentor             VARCHAR(120) NULL,
  mentor_id          INT NULL,                 -- FK opcional (não criada aqui)
  criado_em          DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  atualizado_em      DATETIME NULL ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ================================
-- GRUPO_MEMBRO (1:N com grupo)
-- ================================
CREATE TABLE IF NOT EXISTS grupo_membro (
  ID_membro  INT AUTO_INCREMENT PRIMARY KEY,
  ID_grupo   INT NOT NULL,
  nome       VARCHAR(120) NOT NULL,
  ra         VARCHAR(32) NOT NULL,
  telefone   VARCHAR(32),
  CONSTRAINT fk_membro_grupo FOREIGN KEY (ID_grupo)
    REFERENCES grupo(ID_grupo)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE INDEX IF NOT EXISTS idx_membro_grupo ON grupo_membro (ID_grupo);

-- ============================================================
-- USUARIO
--  - RA como VARCHAR(32) para não perder zeros à esquerda/alfanumérico
--  - senha VARCHAR(255) para bcrypt (ou texto em ambiente dev)
--  - ID_grupo NULL permite ADM/Mentor sem grupo vinculado
--  - foto_url opcional
-- ============================================================
CREATE TABLE IF NOT EXISTS usuario (
  ID_usuario     INT PRIMARY KEY AUTO_INCREMENT,
  RA             VARCHAR(32)  NULL,
  nome_usuario   VARCHAR(120) NOT NULL,
  email          VARCHAR(160) NULL,
  senha          VARCHAR(255) NOT NULL,
  cargo          VARCHAR(10)  NOT NULL,  -- 'adm' | 'mentor' | 'aluno'
  ID_grupo       INT          NULL,
  foto_url       VARCHAR(500) NULL,
  created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT uq_usuario_email UNIQUE (email),
  CONSTRAINT uq_usuario_ra    UNIQUE (RA),
  CONSTRAINT fk_usuario_grupo FOREIGN KEY (ID_grupo)
    REFERENCES grupo (ID_grupo)
    ON DELETE SET NULL
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE INDEX IF NOT EXISTS idx_usuario_id_grupo ON usuario (ID_grupo);

-- ============================================================
-- METAS (por grupo)
-- ============================================================
CREATE TABLE IF NOT EXISTS metas (
  ID_metas             INT PRIMARY KEY AUTO_INCREMENT,
  descricao            VARCHAR(100) NOT NULL,
  valor_esperado       DECIMAL(12,2) NOT NULL,
  meta_data_criacao    TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  meta_data_final      DATE NULL,
  status               VARCHAR(25)  NULL, -- ex.: 'aberta','andamento','concluida'
  ID_grupo             INT NOT NULL,
  CONSTRAINT fk_metas_grupo FOREIGN KEY (ID_grupo)
    REFERENCES grupo (ID_grupo)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;


CREATE INDEX IF NOT EXISTS idx_metas_id_grupo ON metas (ID_grupo);

-- ============================================================
-- RELATORIO (por grupo; período)
-- ============================================================
CREATE TABLE IF NOT EXISTS relatorio (
  ID_relatorio           INT PRIMARY KEY AUTO_INCREMENT,
  periodo_inicio         DATE NOT NULL,
  periodo_fim            DATE NOT NULL,
  relatorio_data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ID_grupo               INT NOT NULL,
  CONSTRAINT fk_relatorio_grupo FOREIGN KEY (ID_grupo)
    REFERENCES grupo (ID_grupo)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE INDEX IF NOT EXISTS idx_relatorio_id_grupo ON relatorio (ID_grupo);

-- ============================================================
-- POSTAGEM (por usuário)
-- ============================================================
CREATE TABLE IF NOT EXISTS postagem (
  ID_postagem          INT PRIMARY KEY AUTO_INCREMENT,
  conteudo             VARCHAR(255) NOT NULL,
  postagem_data_envio  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  tipo_postagem        VARCHAR(255) NULL,
  ID_usuario           INT NOT NULL,
  CONSTRAINT fk_postagem_usuario FOREIGN KEY (ID_usuario)
    REFERENCES usuario (ID_usuario)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE INDEX IF NOT EXISTS idx_postagem_id_usuario ON postagem (ID_usuario);

-- ============================================================
-- DOACAO (por postagem)
--   (modelo atual com subtabelas dinheiro/item)
-- ============================================================
CREATE TABLE IF NOT EXISTS doacao (
  ID_doacao            INT PRIMARY KEY AUTO_INCREMENT,
  descricao            VARCHAR(100) NULL,
  doacao_data_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ID_postagem          INT NOT NULL,
  CONSTRAINT fk_doacao_postagem FOREIGN KEY (ID_postagem)
    REFERENCES postagem (ID_postagem)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE INDEX IF NOT EXISTS idx_doacao_id_postagem ON doacao (ID_postagem);

-- Subtipo: dinheiro
CREATE TABLE IF NOT EXISTS doacao_dinheiro (
  ID_doacao     INT PRIMARY KEY,
  valor_doacao  DECIMAL(12,2) NOT NULL,
  CONSTRAINT fk_doacao_dinheiro_doacao FOREIGN KEY (ID_doacao)
    REFERENCES doacao (ID_doacao)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- Subtipo: item
CREATE TABLE IF NOT EXISTS doacao_item (
  ID_doacao   INT PRIMARY KEY,
  item_doacao VARCHAR(50) NOT NULL,
  quantidade  DECIMAL(12,3) NOT NULL,
  unidade     VARCHAR(10)   NOT NULL, -- ex.: 'kg','g','un','l'
  CONSTRAINT fk_doacao_item_doacao FOREIGN KEY (ID_doacao)
    REFERENCES doacao (ID_doacao)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

-- ============================================================
-- ARQUIVO (anexos de doação e/ou de postagem)
--   Observação: mantenha a regra na aplicação: ao menos um dos dois IDs
-- ============================================================
CREATE TABLE IF NOT EXISTS arquivo (
  ID_arquivo   INT PRIMARY KEY AUTO_INCREMENT,
  tipo_arquivo VARCHAR(25)  NOT NULL,
  nome_arquivo VARCHAR(255) NOT NULL,
  ID_doacao    INT NULL,
  ID_postagem  INT NULL,
  CONSTRAINT fk_arquivo_doacao FOREIGN KEY (ID_doacao)
    REFERENCES doacao (ID_doacao)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT fk_arquivo_postagem FOREIGN KEY (ID_postagem)
    REFERENCES postagem (ID_postagem)
    ON DELETE CASCADE
    ON UPDATE CASCADE
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

CREATE INDEX IF NOT EXISTS idx_arquivo_id_doacao   ON arquivo (ID_doacao);
CREATE INDEX IF NOT EXISTS idx_arquivo_id_postagem ON arquivo (ID_postagem);

-- ============================================================
-- USER PRESENCE (online/ausente/offline)
-- ============================================================
CREATE TABLE IF NOT EXISTS user_presence (
  user_id      VARCHAR(64) PRIMARY KEY,
  status       ENUM('online','ausente','offline') NOT NULL DEFAULT 'offline',
  last_seen    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB
  DEFAULT CHARSET=utf8mb4
  COLLATE=utf8mb4_unicode_ci;

/* ======================================================================
   SEEDS DE TESTE
   - Incluem 1 grupo, 1 adm, 1 mentor, 1 aluno
   - Senhas em TEXTO (para dev). Seu controller pode aplicar bcrypt depois.
   ====================================================================== */

-- Grupo "padrão" (evita duplicar sem precisar UNIQUE)
INSERT INTO grupo (nome_grupo, mentor)
SELECT 'Grupo Exemplo', 'Mentor Teste'
WHERE NOT EXISTS (
  SELECT 1 FROM grupo WHERE nome_grupo = 'Grupo Exemplo' LIMIT 1
);

-- Limpa usuários de teste (se existirem)
DELETE FROM usuario
WHERE email IN ('adm@test.com','mentor@test.com')
   OR RA = '12345';

-- ADM
INSERT INTO usuario (RA, nome_usuario, email, senha, cargo, ID_grupo, foto_url)
VALUES (NULL, 'Administrador', 'adm@test.com', 'admin123', 'adm', NULL, NULL);

-- Mentor (sem grupo definido ainda)
INSERT INTO usuario (RA, nome_usuario, email, senha, cargo, ID_grupo, foto_url)
VALUES (NULL, 'Mentor Teste', 'mentor@test.com', '123456', 'mentor', NULL, NULL);

-- Aluno (entra no grupo exemplo)
INSERT INTO usuario (RA, nome_usuario, email, senha, cargo, ID_grupo, foto_url)
VALUES ('12345', 'Aluno Exemplo', NULL, '123456', 'aluno',
        (SELECT ID_grupo FROM grupo WHERE nome_grupo='Grupo Exemplo' LIMIT 1),
        NULL);

-- Amostra de membros para o grupo exemplo
DELETE FROM grupo_membro WHERE ID_grupo = (SELECT ID_grupo FROM grupo WHERE nome_grupo='Grupo Exemplo' LIMIT 1);
INSERT INTO grupo_membro (ID_grupo, nome, ra, telefone)
SELECT g.ID_grupo, m.nome, m.ra, m.tel
FROM (
  SELECT 'Aluno Exemplo' AS nome, '12345' AS ra, '1199999-0000' AS tel
  UNION ALL
  SELECT 'Colega 2', '54321', '1198888-0000'
) AS m
JOIN (SELECT ID_grupo FROM grupo WHERE nome_grupo='Grupo Exemplo' LIMIT 1) g;

-- Meta exemplo para o grupo
INSERT INTO metas (descricao, valor_esperado, meta_data_final, status, ID_grupo)
SELECT 'Campanha 1º semestre', 2500.00, DATE_ADD(CURDATE(), INTERVAL 30 DAY), 'aberta', g.ID_grupo
FROM (SELECT ID_grupo FROM grupo WHERE nome_grupo='Grupo Exemplo' LIMIT 1) g
WHERE NOT EXISTS (SELECT 1 FROM metas WHERE ID_grupo=g.ID_grupo LIMIT 1);

-- Postagem exemplo (do aluno)
INSERT INTO postagem (conteudo, tipo_postagem, ID_usuario)
SELECT 'Primeira postagem do aluno', 'texto', u.ID_usuario
FROM usuario u
WHERE u.RA='12345'
LIMIT 1;

-- Doação em dinheiro (vinculada à postagem do aluno)
INSERT INTO doacao (descricao, ID_postagem)
SELECT 'Pix arrecadação feira', p.ID_postagem
FROM postagem p
JOIN usuario u ON u.ID_usuario = p.ID_usuario
WHERE u.RA='12345'
ORDER BY p.ID_postagem ASC
LIMIT 1;

INSERT INTO doacao_dinheiro (ID_doacao, valor_doacao)
SELECT d.ID_doacao, 150.00
FROM doacao d
JOIN postagem p ON p.ID_postagem = d.ID_postagem
JOIN usuario u ON u.ID_usuario = p.ID_usuario
WHERE u.RA='12345'
ORDER BY d.ID_doacao ASC
LIMIT 1;

-- Doação de item (também atrelada à postagem)
INSERT INTO doacao (descricao, ID_postagem)
SELECT 'Cestas básicas doadas pela Empresa X', p.ID_postagem
FROM postagem p
JOIN usuario u ON u.ID_usuario = p.ID_usuario
WHERE u.RA='12345'
ORDER BY p.ID_postagem ASC
LIMIT 1;

INSERT INTO doacao_item (ID_doacao, item_doacao, quantidade, unidade)
SELECT d.ID_doacao, 'Cesta básica', 10, 'un'
FROM doacao d
JOIN postagem p ON p.ID_postagem = d.ID_postagem
JOIN usuario u ON u.ID_usuario = p.ID_usuario
WHERE u.RA='12345'
ORDER BY d.ID_doacao DESC
LIMIT 1;

-- Anexo exemplo (em uma das doações)
INSERT INTO arquivo (tipo_arquivo, nome_arquivo, ID_doacao)
SELECT 'comprovante', 'comprovante_exemplo.pdf', d.ID_doacao
FROM doacao d
ORDER BY d.ID_doacao ASC
LIMIT 1;

-- Presença de usuário (exemplo)
INSERT INTO user_presence (user_id, status)
VALUES ('adm@test.com', 'offline')
ON DUPLICATE KEY UPDATE status=VALUES(status);


select * FROM grupo;
select *
from doacao;
select  * from usuario;





